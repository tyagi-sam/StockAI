version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: stock_ai_postgres_prod
    environment:
      POSTGRES_DB: stock_ai
      POSTGRES_USER: ${POSTGRES_USER:-stock_ai_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-stock_ai_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - stock_ai_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-stock_ai_user} -d stock_ai"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: stock_ai_redis_prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - stock_ai_network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: stock_ai_backend_prod
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-stock_ai_user}:${POSTGRES_PASSWORD:-stock_ai_password}@postgres:5432/stock_ai
      - REDIS_URL=redis://:${REDIS_PASSWORD:-}@redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - FERNET_KEY=${FERNET_KEY}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - ZERODHA_API_KEY=${ZERODHA_API_KEY}
      - ZERODHA_API_SECRET=${ZERODHA_API_SECRET}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SMTP_TLS=${SMTP_TLS}
      - SMTP_SSL=${SMTP_SSL}
      - FROM_EMAIL=${FROM_EMAIL}
      - FROM_NAME=${FROM_NAME}
      - OTP_EXPIRE_MINUTES=${OTP_EXPIRE_MINUTES}
      - OTP_LENGTH=${OTP_LENGTH}
      - ENVIRONMENT=production
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS}
      - FRONTEND_URL=${FRONTEND_URL}
      - WS_URL=ws://localhost:8000
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - stock_ai_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (React) - Production
  frontend:
    build:
      context: ./frontend-react
      dockerfile: Dockerfile
    container_name: stock_ai_frontend_prod
    environment:
      - VITE_API_URL=${FRONTEND_URL:-http://localhost:8000}
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - stock_ai_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: stock_ai_nginx_prod
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - stock_ai_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  stock_ai_network:
    driver: bridge 